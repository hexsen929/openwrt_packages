#!/usr/bin/env lua

local json = require "luci.jsonc"
local UCI = require "luci.model.uci"
local fs   = require "nixio.fs"
local sys  = require "luci.sys"

local methods = {
	get_status = {
		call = function()
			local uci = UCI.cursor()
			local lease_file = uci:get("upnpd", "config", "upnp_lease_file")

			local nat_table_name = uci:get("upnpd", "config", "upnp_nat_table_name")
			local nat_chain = uci:get("upnpd", "config", "upnp_nat_chain")

			local upnp_nat_table_name = nat_table_name and nat_table_name or "fw4"
			local upnp_nat_chain = nat_chain and nat_chain or "upnp_prerouting"

			local ipv4_hints = sys.net.ipv4_hints()
			local rule = { }

			local nft = assert(io.popen(string.format("nft -a list chain inet %s %s 2>/dev/null", upnp_nat_table_name, upnp_nat_chain)))
			if nft then
				while true do
					local ln = nft:read("*l")
					if not ln then
						break
					elseif ln:match("^\t\tiif") then
						local protonum, extport, intaddr, intport, num =
							ln:match("^\t\tiif \".-\" @.- (%S-) th dport (%d+) dnat ip to (%S-):(%d+) # handle (%d+)$")
						local descr = ""
						local proto = "tcp"
						if protonum == "0x11" then
							proto = "udp"
						end
						if num and proto and extport and intaddr and intport then
							extport = tonumber(extport)
							intport = tonumber(intport)

							local upnpf = lease_file and io.open(lease_file, "r")
							if upnpf then
								while true do
									local uln = upnpf:read("*l")
									if uln then
										descr = uln:match(string.format("^%s:%d:%s:%d:%%d*:(.*)$", proto:upper(), extport, intaddr, intport))
									end
									if not descr then
										descr = ""
									else
										break
									end
								end
								upnpf:close()
							end

							local host_hint, _, e

							for _,e in pairs(ipv4_hints) do
								if e[1] == intaddr then
									host_hint = e[2]
									break
								end
							end

							rule[#rule+1] = {
								num = num,
								proto   = proto:upper(),
								extport = extport,
								intaddr = intaddr,
								host_hint = host_hint,
								intport = intport,
								descr = descr
							}
						end
					end
				end

				nft:close()
			end

			return { rules = rule }
		end
	},
	delete_rule = {
		args = { token = "token" },
		call = function(args)
			local util = require "luci.util"
			local idx = args and tonumber(args.token)

			if idx and idx > 0 then
				local uci = UCI.cursor()
				local proto, protonum, extport, intaddr, intport

				local table_name = uci:get("upnpd", "config", "upnp_table_name")
				local nat_table_name = uci:get("upnpd", "config", "upnp_nat_table_name")
				local forward_chain = uci:get("upnpd", "config", "upnp_forward_chain")
				local nat_chain = uci:get("upnpd", "config", "upnp_nat_chain")

				local upnp_table_name = table_name and table_name or "fw4"
				local upnp_nat_table_name = nat_table_name and nat_table_name or "fw4"
				local upnp_forward_chain = forward_chain and forward_chain or "upnp_forward"
				local upnp_nat_chain = nat_chain and nat_chain or "upnp_prerouting"

				local nft = assert(io.popen(string.format("nft -a list chain inet %s %s 2>/dev/null", upnp_nat_table_name, upnp_nat_chain)))
				if nft then
					while true do
						local ln = nft:read("*l")
						if not ln then
							break
						elseif ln:match(string.format("^\t\tiif \".-\" @.- 0x[0-9A-Fa-f]+ th dport [0-9]+ dnat ip to .-:[0-9]+ # handle %d$", idx)) then
							protonum, extport, intaddr, intport =
								ln:match("^\t\tiif \".-\" @.- (%S-) th dport (%d+) dnat ip to (%S-):(%d+) # handle [0-9]+$")
							if protonum == "0x6" then
								proto = "tcp"
							elseif protonum == "0x11" then
								proto = "udp"
							end
							sys.call(string.format("nft delete rule inet %s %s handle %d", upnp_nat_table_name, upnp_nat_chain, idx))
						end
					end
					nft:close()
				end

				local nfts = assert(io.popen(string.format("nft -a list chain inet %s %s 2>/dev/null", upnp_table_name, upnp_forward_chain)))
				if nfts then
					while true do
						local ln = nfts:read("*l")
						if not ln then
							break
						elseif ln:match(string.format("^\t\tiif \".-\" th dport %d @.- 0x[0-9A-Fa-f]+ @.- %s accept # handle [0-9]+$", extport, protonum)) then
							local num =
								ln:match("^\t\tiif \".-\" th dport [0-9]+ @.- 0x[0-9A-Fa-f]+ @.- 0x[0-9A-Fa-f]+ accept # handle (%d+)$")
							sys.call(string.format("nft delete rule inet %s %s handle %d", upnp_table_name, upnp_forward_chain, num))
						end
					end
					nfts:close()
				end

				local lease_file = uci:get("upnpd", "config", "upnp_lease_file")
				if lease_file and fs.access(lease_file) then
					local upnpf = io.open(lease_file, "r")
					local linenum = 0
					local matched = 0
					if upnpf then
						while true do
							local ln = upnpf:read("*l")
							linenum = linenum + 1
							if not ln then
								break
							elseif ln:match(string.format("^%s:%d:%s:%d:.-:.-$", proto:upper(), extport, intaddr, intport)) then
								matched = 1
								break
							end
						end
					end
					if matched > 0 then
						sys.call("sed -i -e '%dd' %s" %{ linenum, util.shellquote(lease_file) })
					end
				end

				uci.unload()

				return { result = "OK" }
			end

			return { result = "Bad request" }
		end
	}
}

local function parseInput()
	local parse = json.new()
	local done, err

	while true do
		local chunk = io.read(4096)
		if not chunk then
			break
		elseif not done and not err then
			done, err = parse:parse(chunk)
		end
	end

	if not done then
		print(json.stringify({ error = err or "Incomplete input" }))
		os.exit(1)
	end

	return parse:get()
end

local function validateArgs(func, uargs)
	local method = methods[func]
	if not method then
		print(json.stringify({ error = "Method not found" }))
		os.exit(1)
	end

	if type(uargs) ~= "table" then
		print(json.stringify({ error = "Invalid arguments" }))
		os.exit(1)
	end

	uargs.ubus_rpc_session = nil

	local k, v
	local margs = method.args or {}
	for k, v in pairs(uargs) do
		if margs[k] == nil or
		   (v ~= nil and type(v) ~= type(margs[k]))
		then
			print(json.stringify({ error = "Invalid arguments" }))
			os.exit(1)
		end
	end

	return method
end

if arg[1] == "list" then
	local _, method, rv = nil, nil, {}
	for _, method in pairs(methods) do rv[_] = method.args or {} end
	print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
	local args = parseInput()
	local method = validateArgs(arg[2], args)
	local result, code = method.call(args)
	print((json.stringify(result):gsub("^%[%]$", "{}")))
	os.exit(code or 0)
end
